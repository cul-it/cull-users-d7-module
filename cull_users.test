<?php
/**
 * @file
 * Test case for testing the cron example module.
 */

/**
 * cull_users test class
 *
 * @ingroup cull_users
 */
class CullUsersTestCase extends DrupalWebTestCase {
  protected $webUser;
  protected $dummy_users;
  protected $dummy_user_count = 7;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Cull Users functionality',
      'description' => 'Test the functionality of Cull Users.',
      'group' => 'Cull Users',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    parent::setUp('cull_users');
    // Create user. Search content permission granted for the search block to
    // be shown.
    $this->webUser = $this->drupalCreateUser(array('administer site configuration'));
    $this->drupalLogin($this->webUser);
    for ($i=0; $i < $this->dummy_user_count; $i++) {
      $user = $this->drupalCreateUser();
    }
  }

  /**
   * Test running cron through the user interface.
   */
  public function testCullUsersBasic() {
    // Pretend that cron has never been run (even though simpletest seems to
    // run it once...)
    variable_set('cull_users_next_execution', 0);
    $this->drupalGet('examples/cull_users');

    // Initial run should cause cull_users_cron() to fire.
    $post = array();
    $this->drupalPost('examples/cull_users', $post, t('Run cron now'));
    $this->assertText(t('cull_users executed at'));

    // Forcing should also cause cull_users_cron() to fire.
    $post['cron_reset'] = TRUE;
    $this->drupalPost(NULL, $post, t('Run cron now'));
    $this->assertText(t('cull_users executed at'));

    // But if followed immediately and not forced, it should not fire.
    $post['cron_reset'] = FALSE;
    $this->drupalPost(NULL, $post, t('Run cron now'));
    $this->assertNoText(t('cull_users executed at'));

  }
}

/**
 * @} End of "addtogroup cull_users".
 */
