<?php

/**
 * @file
 * Demonstrates use of the Cron API in Drupal - hook_cron()
 */

/**
 * @defgroup cull_users Example: Cron
 * @ingroup examples
 * @{
 * Example using Cron API, including hook_cron() and hook_cron_queue_info().
 *
 * This example is part of the Examples for Developers Project
 * which you can download and experiment with at
 * http://drupal.org/project/examples
 */

/**
 * Implements hook_menu().
 */
function cull_users_menu() {

  $items['examples/cull_users'] = array(
    'title' => 'Cron Example',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cull_users_form'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * The form to provide a link to cron.php.
 */
function cull_users_form($form, &$form_state) {
  $form['status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cron status information'),
  );
  $form['status']['intro'] = array(
    '#markup' => '<div>' . t('The cron example demonstrates hook_cron() and hook_cron_queue_info() processing. If you have administrative privileges you can run cron from this page and see the results.') . '</div>',
  );
  $form['status']['last'] = array(
    '#markup' => '<div>' . t('cull_users_cron() will next execute the first time cron runs after %time (%seconds seconds from now)',
      array(
        '%time' => date_iso8601(variable_get('cull_users_next_execution', time())),
        '%seconds' => variable_get('cull_users_next_execution', time()) - time(),
      )
    ) . '</div>',
  );

  if (user_access('administer site configuration')) {
    $form['cron_run'] = array(
      '#type' => 'fieldset',
      '#title' => t('Run cron manually'),
    );
    $form['cron_run']['cron_reset'] = array(
      '#type' => 'checkbox',
      '#title' => t("Run cull_users's cron regardless of whether interval has expired."),
      '#default_value' => FALSE,
    );
    $form['cron_run']['cron_trigger'] = array(
      '#type' => 'submit',
      '#value' => t('Run cron now'),
      '#submit' => array('cull_users_form_cron_run_submit'),
    );
  }

  $form['configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration of cull_users_cron()'),
  );
  $form['configuration']['cull_users_interval'] = array(
    '#type' => 'select',
    '#title' => t('Cron interval'),
    '#description' => t('Time after which cull_users_cron will respond to a processing request.'),
    '#default_value' => variable_get('cull_users_interval', 60 * 60),
    '#options' => array(
      60 => t('1 minute'),
      300 => t('5 minutes'),
      3600 => t('1 hour'),
      60 * 60 * 24 => t('1 day'),
    ),
  );

  return system_settings_form($form);
}

/**
 * Allow user to directly execute cron, optionally forcing it.
 */
function cull_users_form_cron_run_submit($form, &$form_state) {
  if (!empty($form_state['values']['cron_reset'])) {
    variable_set('cull_users_next_execution', 0);
  }

  // We don't usually use globals in this way. This is used here only to
  // make it easy to tell if cron was run by this form.
  $GLOBALS['cull_users_show_status_message'] = TRUE;
  if (drupal_cron_run()) {
    drupal_set_message(t('Cron ran successfully.'));
  }
  else {
    drupal_set_message(t('Cron run failed.'), 'error');
  }
}


/**
 * Implements hook_cron().
 *
 * hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
 * processing. It gets called every time the Drupal cron runs and must decide
 * what it will do.
 *
 * In this example, it does a watchdog() call after the time named in
 * the variable 'cull_users_next_execution' has arrived, and then it
 * resets that variable to a time in the future.
 */
function cull_users_cron() {
  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = variable_get('cull_users_interval', 60 * 60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= variable_get('cull_users_next_execution', 0)) {

    // find active users who have no roles assigned
    $users_to_delete = db_query("select users.uid from users
      LEFT JOIN users_roles on users.uid = users_roles.uid
      where users.uid > 1 AND users.status <> 0 AND users_roles.rid IS NULL");
    // delete these users
    $deleted = 0;
    foreach($users_to_delete as $user) {
      user_delete($user->uid);
      $deleted++;
    }

    watchdog('cull_users', 'cull_users deleted %deleted users', array('%deleted' => $deleted));
    if (!empty($GLOBALS['cull_users_show_status_message'])) {
      drupal_set_message(t('cull_users executed at %time', array('%time' => date_iso8601(time(0)))));
    }
    variable_set('cull_users_next_execution', time() + $interval);
  }
}


/**
 * @} End of "defgroup cull_users".
 */
